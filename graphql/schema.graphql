# source: https://registry.wapm.dev/graphql
# timestamp: Thu Mar 21 2019 17:25:41 GMT-0700 (Pacific Daylight Time)

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

type Mutation {
  publishPackage(input: PublishPackageInput!): PublishPackagePayload
  tokenAuth(input: ObtainJSONWebTokenInput!): ObtainJSONWebTokenPayload
  registerUser(input: RegisterUserInput!): RegisterUserPayload
  verifyToken(input: VerifyInput!): VerifyPayload
  refreshToken(input: RefreshInput!): RefreshPayload
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

input ObtainJSONWebTokenInput {
  clientMutationId: String
  username: String!
  password: String!
}

"""Obtain JSON Web Token mutation"""
type ObtainJSONWebTokenPayload {
  token: String
  clientMutationId: String
}

type Package implements Node {
  name: String!
  private: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  maintainers: [User]
  versions: [PackageVersion]

  """The ID of the object."""
  id: ID!
  lastVersion: PackageVersion
}

type PackageConnection {
  pageInfo: PageInfo!
  edges: [PackageEdge]!
}

type PackageDistribution {
  downloadUrl: String
}

type PackageEdge {
  """The item at the end of the edge"""
  node: Package

  """A cursor for use in pagination"""
  cursor: String!
}

type PackageVersion {
  package: Package!
  version: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedBy: User!
  distribution: PackageDistribution!
}

type PackageVersionConnection {
  pageInfo: PageInfo!
  edges: [PackageVersionEdge]!
}

type PackageVersionEdge {
  """The item at the end of the edge"""
  node: PackageVersion

  """A cursor for use in pagination"""
  cursor: String!
}

type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

input PublishPackageInput {
  packageName: String!
  file: String
  clientMutationId: String
}

type PublishPackagePayload {
  success: Boolean!
  packageVersion: PackageVersion!
  clientMutationId: String
}

type Query {
  packages(before: String, after: String, first: Int, last: Int): PackageConnection
  recentPackageVersions(before: String, after: String, first: Int, last: Int): PackageVersionConnection
  getPackage(name: String!): Package
  viewer: User
}

input RefreshInput {
  token: String!
  clientMutationId: String
}

type RefreshPayload {
  token: String
  payload: GenericScalar
  clientMutationId: String
}

input RegisterUserInput {
  fullName: String!
  email: String!
  username: String!
  password: String!
  clientMutationId: String
}

type RegisterUserPayload {
  token: String
  clientMutationId: String
}

type User {
  """
  Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
  """
  username: String!
}

input VerifyInput {
  token: String!
  clientMutationId: String
}

type VerifyPayload {
  payload: GenericScalar
  clientMutationId: String
}
